<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学習環境 構築方法 on My New Hugo Site</title>
    <link>https://reikote.github.io/posts/</link>
    <description>Recent content in 学習環境 構築方法 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 22 Dec 2020 12:11:23 +0900</lastBuildDate><atom:link href="https://reikote.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>構築環境の概要</title>
      <link>https://reikote.github.io/posts/00/</link>
      <pubDate>Tue, 22 Dec 2020 12:11:23 +0900</pubDate>
      
      <guid>https://reikote.github.io/posts/00/</guid>
      <description>このドキュメントについて </description>
    </item>
    
    <item>
      <title>VMのセットアップ</title>
      <link>https://reikote.github.io/posts/01/</link>
      <pubDate>Tue, 22 Dec 2020 12:11:23 +0900</pubDate>
      
      <guid>https://reikote.github.io/posts/01/</guid>
      <description>最新の評価環境 2021/01/15 OST3 AI学習プラットフォーム 復帰しました。復帰に伴い、IP変わってます。
 ESXi：192.168.100.126 もしくは 192.168.100.176 vgpu01: 192.168.100.179 …sakuma-san use vgpu02: 192.168.100.180 …kaka-san use vgpu03: 192.168.100.181 vgpu04: 192.168.100.182  VMware ESXi の使い方    こちらにアクセスしログイン
  IDとパスワードはこちら   ID:root
PW:P@ssw0rd
     仮想マシンの作成/登録を選択   新規仮想マシンの作成を選択し、任意の名前とOSを入力     ストレージはNVMeを使用する
  スペックの設定
 CPU 8cores RAM 32GB HDD 100GB     完了後NASストレージをアタッチしてOSをそちらから起動   ログイン後はまずSSHの設定
  $ sudo apt-get install aptitude $ sudo aptitude install ssh $ sudo vi /etc/ssh/sshd_config #以下のように書き換え PermitRootLogin no #PermitRootLogin prohibit-password  ifconfigでIPアドレスを確認後ターミナルでログイン!</description>
    </item>
    
    <item>
      <title>SWのインストールと設定</title>
      <link>https://reikote.github.io/posts/02/</link>
      <pubDate>Tue, 22 Dec 2020 12:11:23 +0900</pubDate>
      
      <guid>https://reikote.github.io/posts/02/</guid>
      <description>環境構築に必要なソフトウェア まずは下記のソフトウェアをインストールします。それぞれのインストール手順も記載しています。
マスター    Software Version Version Info     Docker 19.03.09 https://docs.docker.com/engine/release-notes/   docker-compose 1.28.2 https://docs.docker.com/compose/release-notes/   kubectl 1.20 https://kubernetes.io/ja/docs/tasks/tools/install-kubectl/#   helm 3.x https://github.com/helm/helm/releases    コンテナで実行    Software Version Version Info     Rancher 2.4.8 https://rancher.com/support-maintenance-terms/all-supported-versions/rancher-v2.4.8/   Harbor 1.10.5 https://github.com/goharbor/harbor/releases    ワーカー    Software Version Version Info     Docker 19.</description>
    </item>
    
    <item>
      <title>Rancherの立ち上げ</title>
      <link>https://reikote.github.io/posts/03/</link>
      <pubDate>Tue, 22 Dec 2020 12:11:23 +0900</pubDate>
      
      <guid>https://reikote.github.io/posts/03/</guid>
      <description>Rancher  立ち上げ方法 ※参考リンク
 コンテナの起動 ポートは被ると面倒なのでずらす。 Versionは2.4.8でないと上手くいかなかったので注意  $ sudo docker run -d --restart=unless-stopped -p 8080:80 -p 8443:443 rancher/rancher:v2.4.8 課題１：Docker-compose使ってやってみる   課題１回答   $ mkdir rancher_test $ cd rancher_test $ vim docker-compose.yml docker-compose.yml
version: &#39;3&#39; services: rancher: restart: always image: rancher/rancher:v2.4.8 ports: - &amp;quot;8080:80&amp;quot; - &amp;quot;8443:443&amp;quot; $ docker-compose up -d   
 GUI画面にアクセス IPアドレス:8080をブラウザでアクセス  admin user
 パスワードを設定 アクセスURLを設定 192.168.100.xxx:8443 ClustersページからAdd Clusterをクリック  From existing nodes (Custom)をクリック 任意の名前を入力 Advanced Optionを気を付けてNext (下記画像) etcd, control, workerを選択しコマンドをコピーする マスターノードで実行 workerのみを選択してコマンドをワーカーで実行 ノードに追加されればOK (少し時間がかかった) ダッシュボードが表示されれば成功    Nginx ingressになっていると80番ポートを使ってしまうため、後のHarborの設定が面倒になる</description>
    </item>
    
    <item>
      <title>Harborとの連携</title>
      <link>https://reikote.github.io/posts/04/</link>
      <pubDate>Tue, 22 Dec 2020 12:11:23 +0900</pubDate>
      
      <guid>https://reikote.github.io/posts/04/</guid>
      <description>Harbor  インストール手順 ※こちらを参考
 TLS無しセットアップ  $ wget https://github.com/goharbor/harbor/releases/download/v1.10.5/harbor-offline-installer-v1.10.5.tgz $ tar xzvf./harbor-offline-installer-v1.10.5.tgz $ cd harbor $ vim harbor.yml # 以下のように編集 IPアドレスはMasterノード Hostname:192.168.100.xxx http: Port:80 # ここがalready useとなる場合、5000等にする harbor_admin_passwd: password # 下の部分はTLS絡みのため、コメントアウトした # https: # Ports:443 # certificate: # private_key: $ sudo ./install.sh  Dockerに暗号化通信の利用無に関する設定を事前にやっておく必要がある (Master/Workerどちらも)  ※参考
$ sudo vim /etc/docker/daemon.json { &amp;quot;insecure-registries&amp;quot;:[”192.168.100.xxx(80以外なら:portも追加)&amp;quot;] } ##プライベートレジストリのIPアドレス $ sudo systemctl restart docker  ハーバーにログイン http://192.168.100.xxx:xxxx/  admin password
 トラブルシューティング コンテナの停止方法等 ※参考  ハーバーを再構成する</description>
    </item>
    
    <item>
      <title>NGCにログイン &amp; Harborにプッシュ</title>
      <link>https://reikote.github.io/posts/05/</link>
      <pubDate>Tue, 22 Dec 2020 12:11:23 +0900</pubDate>
      
      <guid>https://reikote.github.io/posts/05/</guid>
      <description>NGCのアカウント作成とログイン  アカウントのところからSetupを選択 Generate API Keyをクリック   APIキーをメモし,DockerからNGCにログイン  NGCにログイン  プライベートレポジトリとNGCにログイン  $ sudo docker login 192.168.100.xxx $ sudo docker login nvcr.io -u $oauthtoken -p bW1mZDRrcXNmbjR1ZXA5NDJtbjBwN3VkZTI6NTZhMTM5YWQtOGRkZS00YTEwLTg3OWUtOTBmOTU3NmZiNjM0  NGCのイメージをプライベートレポジトリに保存  $ vim Dokerfile FROM nvcr.io/nvidia/pytorch:20.09-py3 ENV http_proxy=http://proxy.pn.macnica.co.jp:10080 ENV https_proxy=http://proxy.pn.macnica.co.jp:10080 $ sudo docker build -t 192.168.100.xxx/library/pytorch:20.09-py3 . $ sudo docker push 192.168.100.xxx/library/pytorch:20.09-py3  保存されていることをHarborのGUIで確認    </description>
    </item>
    
    <item>
      <title>ジョブの投入</title>
      <link>https://reikote.github.io/posts/06/</link>
      <pubDate>Tue, 22 Dec 2020 12:11:23 +0900</pubDate>
      
      <guid>https://reikote.github.io/posts/06/</guid>
      <description>マニュフェストの作成  マニュフェスト(yamlファイル)を作成します。  $ vim test.yaml test.yaml
apiVersion: v1 kind: Pod metadata: name: pytorch-job spec: containers: - name: pytorch-container image: 192.168.100.xxx:xxxx/library/pytorch:20.09-py3 command: [&amp;quot;/bin/sh&amp;quot;] args: [&amp;quot;-c&amp;quot;, &amp;quot;python /workspace/examples/upstream/mnist/main.py&amp;quot;] resources: limits: nvidia.com/gpu: 1 imagePullSecrets: - name : nvidia restartPolicy: Never  ジョブを投入してみる  $ kubectl create -f test.yaml  動作確認  $ kubectl get pod   Rancherで実際に動いているか確認してみる   もし何度か試したい場合はpodを消す必要がある
  $ kubectl delete pod pytorch-job  </description>
    </item>
    
    <item>
      <title>ジョブの投入</title>
      <link>https://reikote.github.io/posts/ansible-sakuma-san/</link>
      <pubDate>Tue, 22 Dec 2020 12:11:23 +0900</pubDate>
      
      <guid>https://reikote.github.io/posts/ansible-sakuma-san/</guid>
      <description>マニュフェストの作成  マニュフェスト(yamlファイル)を作成します。  $ vim test.yaml test.yaml
apiVersion: v1 kind: Pod metadata: name: pytorch-job spec: containers: - name: pytorch-container image: 192.168.100.xxx:xxxx/library/pytorch:20.09-py3 command: [&amp;quot;/bin/sh&amp;quot;] args: [&amp;quot;-c&amp;quot;, &amp;quot;python /workspace/examples/upstream/mnist/main.py&amp;quot;] resources: limits: nvidia.com/gpu: 1 imagePullSecrets: - name : nvidia restartPolicy: Never  ジョブを投入してみる  $ kubectl create -f test.yaml  動作確認  $ kubectl get pod   Rancherで実際に動いているか確認してみる   もし何度か試したい場合はpodを消す必要がある
  $ kubectl delete pod pytorch-job  </description>
    </item>
    
  </channel>
</rss>
